// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// For easier development setup - use SQLite
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  chessElo      Int       @default(1200)
  
  // Game history and performance tracking
  gamesPlayed   Int       @default(0)
  wins          Int       @default(0) 
  losses        Int       @default(0)
  
  // Chess.com style stats
  puzzleRating  Int       @default(1200)
  rapidRating   Int       @default(1200) 
  blitzRating   Int       @default(1200)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // NextAuth required relations
  accounts      Account[]
  sessions      Session[]
  
  // Games relationship
  games         Game[]
  
  @@map("users")
}

model Game {
  id                String    @id @default(cuid())
  userId            String
  initialPosition   String    // The GM FEN position where the game started
  finalPosition     String?   // The FEN where the game ended
  moves             String?   // PGN of moves made by user
  outcome           String?   // 'win' | 'loss' | 'draw' | 'forfeit'
  eloChange         Int       // Points gained or lost
  timeSpent         Int?      // Seconds spent on position
  solved           Boolean   @default(false) // Did they solve the position correctly?
  
  // Position metadata
  gmWhite           String?   // Original GM White player
  gmBlack           String?   // Original GM Black player
  event             String?   // Where this position occurred 
  year             Int?      // Year of original game
  
  createdAt         DateTime  @default(now())
  
  // User relationship
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("games")
}
